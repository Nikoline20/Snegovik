import os
import sys
import subprocess
import asyncio
import time
import importlib.util
import requests
import logging
from twitchio.ext import commands
from dotenv import load_dotenv

# ==================== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ====================
log_file = os.path.join(os.path.abspath(os.path.dirname(sys.argv[0])), "bot.log")
logging.basicConfig(
    filename=log_file,
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    encoding="utf-8"
)

# –î—É–±–ª–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console = logging.StreamHandler()
console.setLevel(logging.INFO)
formatter = logging.Formatter("%(asctime)s [%(levelname)s] %(message)s")
console.setFormatter(formatter)
logging.getLogger("").addHandler(console)

logging.info("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

# ==================== –ó–∞–≥—Ä—É–∑–∫–∞ .env ====================
load_dotenv()
BOT_NICK = os.getenv("TWITCH_BOT_NICK")
CHANNEL = os.getenv("TWITCH_CHANNEL")
TOKEN = os.getenv("TWITCH_TOKEN")
CLIENT_ID = os.getenv("CLIENT_ID")
CLIENT_SECRET = os.getenv("CLIENT_SECRET")

HELIX_STREAMS_URL = "https://api.twitch.tv/helix/streams"
APP_TOKEN = None
COMMANDS_DIR = "commands"
AUTOMSG_DIR = "auto_messages"

# ==================== –ü–æ–ª—É—á–µ–Ω–∏–µ App Access Token ====================
def get_app_access_token():
    url = "https://id.twitch.tv/oauth2/token"
    params = {
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET,
        "grant_type": "client_credentials"
    }
    resp = requests.post(url, params=params)
    resp.raise_for_status()
    token = resp.json()["access_token"]
    logging.info("–ü–æ–ª—É—á–µ–Ω App Access Token")
    return token

# ==================== –ë–æ—Ç ====================
class Bot(commands.Bot):
    def __init__(self):
        super().__init__(token=TOKEN, prefix="!", initial_channels=[CHANNEL])
        self.auto_messages = []
        self.chat_message_count = {}

    async def event_ready(self):
        logging.info(f"–ë–æ—Ç {BOT_NICK} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ {CHANNEL}!")
        self.load_custom_commands()
        self.load_auto_messages()
        asyncio.create_task(self.auto_message_loop())
        asyncio.create_task(self.check_stream_status())

    async def event_message(self, message):
        if message.echo:
            return
        # –°—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–π
        for am in self.auto_messages:
            am['counter'] += 1
        await self.handle_commands(message)

    # ==================== –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ====================
    def load_custom_commands(self):
        if os.path.exists(COMMANDS_DIR):
            for fname in os.listdir(COMMANDS_DIR):
                if fname.endswith(".py"):
                    cmd_name = fname.replace(".py", "")

                    async def custom_cmd(ctx, file=fname):
                        spec = importlib.util.spec_from_file_location(
                            "module.name", os.path.join(COMMANDS_DIR, file)
                        )
                        module = importlib.util.module_from_spec(spec)
                        spec.loader.exec_module(module)
                        await module.run(ctx)

                    if cmd_name not in self.commands:
                        self.add_command(commands.Command(name=cmd_name, func=custom_cmd))
            logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: {list(self.commands.keys())}")

    # ==================== –ê–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏—è ====================
    def load_auto_messages(self):
        # –ü—Ä–∏–º–µ—Ä: –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, min_chat_messages ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.auto_messages = [
            {'file': 'discord.py', 'interval': 15*60, 'min_chat_messages': 5, 'last_sent': 0, 'counter': 0},
            {'file': 'follow.py', 'interval': 10*60, 'min_chat_messages': 3, 'last_sent': 0, 'counter': 0},
        ]
        logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –∞–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏—è: {[am['file'] for am in self.auto_messages]}")

    async def auto_message_loop(self):
        while True:
            now = time.time()
            for am in self.auto_messages:
                if now - am['last_sent'] >= am['interval'] and am['counter'] >= am['min_chat_messages']:
                    chan = self.get_channel(CHANNEL)
                    if chan:
                        spec = importlib.util.spec_from_file_location(
                            "module.name", os.path.join(AUTOMSG_DIR, am['file'])
                        )
                        module = importlib.util.module_from_spec(spec)
                        spec.loader.exec_module(module)
                        await module.run(chan)
                        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ {am['file']}")
                    am['last_sent'] = now
                    am['counter'] = 0
            await asyncio.sleep(5)

    # ==================== –ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ====================
    @commands.command(name="–æ–±–Ω–æ–≤–∏—Ç—å")
    async def update_restart(self, ctx: commands.Context):
        if ctx.author.is_mod or ctx.author.name.lower() == CHANNEL.lower():
            await ctx.send("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
            try:
                out = subprocess.check_output(["git", "pull"]).decode("utf-8")
                if "Already up to date" in out or "–£–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ" in out:
                    await ctx.send("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç, –±–æ—Ç —É–∂–µ —Å–≤–µ–∂–∏–π.")
                else:
                    await ctx.send("‚ôªÔ∏è –ù–∞–π–¥–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
                    logging.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                    os.execv(sys.executable, ["python"] + sys.argv)
            except Exception as e:
                await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        else:
            await ctx.send("‚õî –¢–æ–ª—å–∫–æ –º–æ–¥–µ—Ä—ã –∏–ª–∏ —Å—Ç—Ä–∏–º–µ—Ä –º–æ–≥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –±–æ—Ç–∞!")

    # ==================== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∏–º–∞ ====================
    async def check_stream_status(self):
        global APP_TOKEN
        while True:
            if not APP_TOKEN:
                try:
                    APP_TOKEN = get_app_access_token()
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è App Token: {e}")
                    await asyncio.sleep(60)
                    continue

            headers = {
                "Client-ID": CLIENT_ID,
                "Authorization": f"Bearer {APP_TOKEN}"
            }
            params = {"user_login": CHANNEL}
            try:
                resp = requests.get(HELIX_STREAMS_URL, headers=headers, params=params)
                data = resp.json()
                if "data" in data and len(data["data"]) > 0:
                    logging.info("–°—Ç—Ä–∏–º –∑–∞–ø—É—â–µ–Ω!")
                else:
                    logging.info("–°—Ç—Ä–∏–º –Ω–µ –∏–¥—ë—Ç")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä–∏–º–∞: {e}")
            await asyncio.sleep(60)

# ==================== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ====================
bot = Bot()

if __name__ == "__main__":
    bot.run()