import random
import os

# –ö–æ–≥–æ –Ω–µ–ª—å–∑—è –∫—É—Å–∞—Ç—å (–Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä)
BLOCKED_USERS = {
    os.getenv("TWITCH_BOT_NICK", "").lower(),
}
# –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
BLOCKED_USERS = {x for x in BLOCKED_USERS if x}

BITE_MESSAGES = [
    "{user} —á–∏–∫ ‚Äî {target} —É–∫—É—Å–∏–ª –∑–∞ —É—Ö–æ!",
    "{user} –≥—Ä–æ–º–∫–æ –∫—É—Å–Ω—É–ª {target} –∑–∞ –ø–∞–ª–µ—Ü!",
    "{user} —Ç–∏—Ö–æ –ø–æ–¥–∫—Ä–∞–ª—Å—è –∏ –∫—É—Å—å–Ω—É–ª {target} –∑–∞ –ø–ª–µ—á–æ!",
    "{user} —É–∫—É—Å–∏–ª {target} –∑–∞ –Ω–æ–≥—É!",
    "{user} —É–∫—É—Å–∏–ª {target} –∑–∞ –µ–≥–æ –¥–µ–Ω—å–≥–∏!",
    "{user} —É–∫—É—Å–∏–ª {target} –∑–∞ –µ–≥–æ –æ–±–µ—Ä–µ–≥–∏! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —É –≤–∞—Å -10–∫ –æ–±–µ—Ä–µ–≥–æ–≤.",
    "{user} —Å–¥–µ–ª–∞–ª –±–æ–ª—å—à–æ–π –∫—É—Å—å {target} ‚Äî –æ–≥–æ!"
]

def _get_name_from_chatter(ch):
    if ch is None:
        return None
    if isinstance(ch, str):
        return ch
    
    for attr in ("name", "display_name", "login", "user", "nick"):
        v = getattr(ch, attr, None)
        if isinstance(v, str) and v:
            return v
    # fallback
    try:
        return str(ch)
    except Exception:
        return None

async def run(ctx):
    author = ctx.author.name
    author_lc = author.lower()

    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç (—Ü–µ–ª—å)
    parts = (ctx.message.content or "").split()
    target = None
    if len(parts) > 1:
        target = parts[1].lstrip("@").strip()
    else:
        # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–±—Ä–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑—Ä–∏—Ç–µ–ª–µ–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç
        candidates = []

        try:
            chatters = getattr(ctx.channel, "chatters", None)
            if chatters:
                candidates = [_get_name_from_chatter(c) for c in chatters]
        except Exception:
            candidates = []

        if not candidates:
            try:
                chs = getattr(ctx.bot, "connected_channels", None)
                if chs:
                    ch0 = chs[0]
                    chatters = getattr(ch0, "chatters", None)
                    if chatters:
                        candidates = [_get_name_from_chatter(c) for c in chatters]
            except Exception:
                pass

        # –æ—á–∏—â–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏ —É–±–∏—Ä–∞–µ–º None, –ø—É—Å—Ç—ã–µ –∏ –∞–≤—Ç–æ—Ä–∞
        candidates = [c for c in (candidates or []) if c and c.strip()]
        candidates = [c for c in candidates if c.lower() != author_lc]

        if not candidates:
            await ctx.send(f"@{author}, —Å–µ–π—á–∞—Å –Ω–µ–∫–æ–º—É –¥–µ–ª–∞—Ç—å –∫—É—Å—å ‚Äî –Ω–∏–∫–æ–≥–æ –≤ —á–∞—Ç–µ –Ω–µ –Ω–∞—à—ë–ª.")
            return

        # –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ
        target = random.choice(candidates)

    if not target:
        await ctx.send(f"@{author}, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª—å –¥–ª—è –∫—É—Å—å.")
        return

    target_str = str(target).strip()
    target_lc = target_str.lower()

    # –ù–µ–ª—å–∑—è –∫—É—Å–∞—Ç—å –∏–∑ BLOCKED_USERS
    if target_lc in BLOCKED_USERS:
        blocked_list = ", ".join(sorted(x for x in BLOCKED_USERS if x))
        msg = f"@{author}, –Ω–µ–ª—å–∑—è –∫—É—Å–∞—Ç—å {target_str}. –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö: {blocked_list}" if blocked_list else f"@{author}, –Ω–µ–ª—å–∑—è –∫—É—Å–∞—Ç—å {target_str}."
        await ctx.send(msg)
        return

    # –ù–µ–ª—å–∑—è –∫—É—Å–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
    if target_lc == author_lc:
        await ctx.send(f"@{author}, —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –∫—É—Å–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è üòâ")
        return

    # –°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    template = random.choice(BITE_MESSAGES)
    out = template.format(user=author, target=target_str)
    await ctx.send(out)